-- Generated by Oracle SQL Developer Data Modeler 20.2.0.167.1538
--   at:        2020-12-16 21:36:10 EET
--   site:      Oracle Database 12c
--   type:      Oracle Database 12c



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE angajati (
    id_angajat        NUMBER(2) NOT NULL,
    nume_angajat      VARCHAR2(30) NOT NULL,
    joburi_id_job     NUMBER(2) NOT NULL,
    echipe_id_echipa  NUMBER(2) NOT NULL,
    salariu           NUMBER(7, 2) NOT NULL
)
LOGGING;

ALTER TABLE angajati
    ADD CONSTRAINT angajati_nume_angajat_chk CHECK ( REGEXP_LIKE ( nume_angajat,
                                                                   '^[a-zA-Z .''-]+$' ) );

ALTER TABLE angajati ADD CONSTRAINT angajati_salariu_chk CHECK ( salariu >= 2300 );

ALTER TABLE angajati ADD CONSTRAINT angajati_pk PRIMARY KEY ( id_angajat,
                                                              joburi_id_job );

CREATE TABLE detalii_angajati (
    serie_act_identitate  VARCHAR2(20) NOT NULL,
    tip_act_identitate    VARCHAR2(20) NOT NULL,
    data_nastere          DATE,
    nr_telefon            VARCHAR2(13),
    adresa_domiciliu      VARCHAR2(40),
    nationalitate         VARCHAR2(3),
    data_angajare         DATE,
    tip_contract_munca    VARCHAR2(20) NOT NULL,
    angajati_id_angajat   NUMBER(2) NOT NULL,
    angajati_id_job       NUMBER(2) NOT NULL
)
LOGGING;

ALTER TABLE detalii_angajati
    ADD CONSTRAINT detalii_tip_act_identitate_chk CHECK ( tip_act_identitate IN ( 'buletin', 'pasaport' ) );

ALTER TABLE detalii_angajati
    ADD CONSTRAINT detalii_nr_telefon_chk CHECK ( length(nr_telefon) >= 10 );

ALTER TABLE detalii_angajati
    ADD CONSTRAINT detalii_nationalitate_chk CHECK ( nationalitate IN ( 'BUL', 'ENG', 'FRA', 'GER', 'ITA',
                                                                        'MOL', 'POL', 'POR', 'RO', 'RUS',
                                                                        'SPA', 'UNG' ) );

ALTER TABLE detalii_angajati ADD CONSTRAINT detalii_data_angajare_chk CHECK ( data_angajare > data_nastere );

ALTER TABLE detalii_angajati
    ADD CONSTRAINT detalii_tip_contract_munca_chk CHECK ( tip_contract_munca IN ( 'full-time', 'part-time' ) );

CREATE UNIQUE INDEX detalii_angajati__idx ON
    detalii_angajati (
        angajati_id_angajat
    ASC,
        angajati_id_job
    ASC )
        LOGGING;

CREATE TABLE echipe (
    id_echipa     NUMBER(2) NOT NULL,
    id_manager    NUMBER(2) NOT NULL,
    nume_manager  VARCHAR2(30) NOT NULL
)
LOGGING;

ALTER TABLE echipe
    ADD CONSTRAINT echipe_nume_manager_chk CHECK ( REGEXP_LIKE ( nume_manager,
                                                                 '^[a-zA-Z .''-]+$' ) );

ALTER TABLE echipe ADD CONSTRAINT echipe_pk PRIMARY KEY ( id_echipa );

CREATE TABLE echipe_magazine_fk (
    id_echipa               NUMBER(2) NOT NULL,
    id_magazin              NUMBER(2) NOT NULL,
    id_oras                 NUMBER(2) NOT NULL,
    nr_angajati_in_magazin  NUMBER(1)
)
LOGGING;

ALTER TABLE echipe_magazine_fk
    ADD CONSTRAINT echipe_magazine_fk_pk PRIMARY KEY ( id_echipa,
                                                       id_magazin,
                                                       id_oras );

CREATE TABLE joburi (
    id_job        NUMBER(2) NOT NULL,
    denumire_job  VARCHAR2(15) NOT NULL,
    salariu_baza  NUMBER(7, 2) NOT NULL
)
LOGGING;

ALTER TABLE joburi
    ADD CONSTRAINT joburi_denumire_job CHECK ( REGEXP_LIKE ( denumire_job,
                                                             '^[a-zA-Z .''-]+$' ) );

ALTER TABLE joburi ADD CONSTRAINT joburi_salariu_baza_chk CHECK ( salariu_baza >= 2300 );

ALTER TABLE joburi ADD CONSTRAINT joburi_pk PRIMARY KEY ( id_job );

CREATE TABLE magazine (
    id_magazin        NUMBER(2) NOT NULL,
    orase_id_oras     NUMBER(2) NOT NULL,
    denumire_magazin  VARCHAR2(20) NOT NULL
)
LOGGING;

ALTER TABLE magazine
    ADD CONSTRAINT magazine_denumire_chk CHECK ( REGEXP_LIKE ( denumire_magazin,
                                                               '^[a-zA-Z .''-]+$' ) );

ALTER TABLE magazine ADD CONSTRAINT magazine_pk PRIMARY KEY ( id_magazin,
                                                              orase_id_oras );

CREATE TABLE orase (
    id_oras        NUMBER(2) NOT NULL,
    denumire_oras  VARCHAR2(20) NOT NULL
)
LOGGING;

ALTER TABLE orase
    ADD CONSTRAINT orase_denumire CHECK ( REGEXP_LIKE ( denumire_oras,
                                                        '^[a-zA-Z .''-]+$' ) );

ALTER TABLE orase ADD CONSTRAINT orase_pk PRIMARY KEY ( id_oras );

CREATE TABLE reparatii_efectuate (
    data_incepere_reparatii   DATE NOT NULL,
    data_terminare_reparatii  DATE NOT NULL,
    pret_reparatie            NUMBER(7, 2) NOT NULL,
    angajati_id_angajat       NUMBER(2) NOT NULL,
    angajati_id_job           NUMBER(2) NOT NULL
)
LOGGING;

ALTER TABLE reparatii_efectuate ADD CONSTRAINT reparatii_data_terminare_chk CHECK ( data_terminare_reparatii > data_incepere_reparatii );

ALTER TABLE reparatii_efectuate ADD CONSTRAINT reparatii_pret_chk CHECK ( pret_reparatie >= 0 );

CREATE TABLE situatie_concedii (
    zile_concediu_ramase          NUMBER(2) NOT NULL,
    zile_concediu_medical_ramase  NUMBER(2) NOT NULL,
    zile_concediu_fara_plata      NUMBER(2),
    angajati_id_angajat           NUMBER(2) NOT NULL,
    angajati_id_job               NUMBER(2) NOT NULL
)
LOGGING;

ALTER TABLE situatie_concedii
    ADD CONSTRAINT concedii_zile_chk CHECK ( zile_concediu_ramase BETWEEN 0 AND 1000 );

ALTER TABLE situatie_concedii
    ADD CONSTRAINT concedii_zile_medical_chk CHECK ( zile_concediu_medical_ramase BETWEEN 0 AND 1000 );

ALTER TABLE situatie_concedii
    ADD CONSTRAINT concedii_zile_fara_chk CHECK ( zile_concediu_fara_plata BETWEEN 0 AND 50 );

CREATE UNIQUE INDEX situatie_concedii__idx ON
    situatie_concedii (
        angajati_id_angajat
    ASC,
        angajati_id_job
    ASC )
        LOGGING;

ALTER TABLE angajati
    ADD CONSTRAINT angajati_echipe_fk FOREIGN KEY ( echipe_id_echipa )
        REFERENCES echipe ( id_echipa )
    NOT DEFERRABLE;

ALTER TABLE angajati
    ADD CONSTRAINT angajati_joburi_fk FOREIGN KEY ( joburi_id_job )
        REFERENCES joburi ( id_job )
    NOT DEFERRABLE;

ALTER TABLE situatie_concedii
    ADD CONSTRAINT concedii_angajati_fk FOREIGN KEY ( angajati_id_angajat,
                                                      angajati_id_job )
        REFERENCES angajati ( id_angajat,
                              joburi_id_job )
    NOT DEFERRABLE;

ALTER TABLE detalii_angajati
    ADD CONSTRAINT detalii_angajati_fk FOREIGN KEY ( angajati_id_angajat,
                                                     angajati_id_job )
        REFERENCES angajati ( id_angajat,
                              joburi_id_job )
    NOT DEFERRABLE;

ALTER TABLE echipe_magazine_fk
    ADD CONSTRAINT echipe_magazine_fk FOREIGN KEY ( id_echipa )
        REFERENCES echipe ( id_echipa )
    NOT DEFERRABLE;

ALTER TABLE echipe_magazine_fk
    ADD CONSTRAINT echipe_magazine_fkv2 FOREIGN KEY ( id_magazin,
                                                      id_oras )
        REFERENCES magazine ( id_magazin,
                              orase_id_oras )
    NOT DEFERRABLE;

ALTER TABLE magazine
    ADD CONSTRAINT magazine_orase_fk FOREIGN KEY ( orase_id_oras )
        REFERENCES orase ( id_oras )
    NOT DEFERRABLE;

ALTER TABLE reparatii_efectuate
    ADD CONSTRAINT reparatii_angajati_fk FOREIGN KEY ( angajati_id_angajat,
                                                       angajati_id_job )
        REFERENCES angajati ( id_angajat,
                              joburi_id_job )
    NOT DEFERRABLE;

CREATE OR REPLACE TRIGGER TRG_detalii_data_angajare_BRIU 
    BEFORE INSERT OR UPDATE ON Detalii_Angajati 
    FOR EACH ROW 
BEGIN
 IF ( :new.data_angajare > SYSDATE )
  THEN
   RAISE_APPLICATION_ERROR ( -20001,
   		'Data invalida: ' || TO_CHAR ( :new.data_angajare, 'DD.MM.YYYY' ) || ' Data angajarii trebuie sa fie mai mica decat data curenta' );
   END IF;
END; 
/

CREATE OR REPLACE TRIGGER "TRG_detalii_data_nastere_BRIU " 
    BEFORE INSERT OR UPDATE ON Detalii_Angajati 
    FOR EACH ROW 
BEGIN
 IF ( :new.data_nastere > SYSDATE )
  THEN
   RAISE_APPLICATION_ERROR ( -20001,
   		'Data invalida: ' || TO_CHAR ( :new.data_nastere, 'DD.MM.YYYY' ) || ' Data nasterii trebuie sa fie mai mica decat data curenta' );
   END IF;
END; 
/

CREATE OR REPLACE TRIGGER TRG_echipe_maga_nr_echipe_BRIU 
    BEFORE INSERT OR UPDATE ON echipe_magazine_FK 
    FOR EACH ROW 
DECLARE
  temp_nr NUMBER;
BEGIN
    SELECT COUNT(ID_angajat) into temp_nr FROM Angajati WHERE Echipe_ID_echipa = :new.ID_echipa;
 IF ( :new.nr_angajati_in_magazin >  temp_nr)
  THEN
   RAISE_APPLICATION_ERROR ( -20001,
   		'Echipa respectiva nu are destui angajati de a introduce in magazin.' );
   END IF;
END; 
/

CREATE OR REPLACE TRIGGER TRG_reparatii_incepere_BRIU 
    BEFORE INSERT OR UPDATE ON Reparatii_Efectuate 
    FOR EACH ROW 
BEGIN
 IF ( :new.data_incepere_reparatii > SYSDATE )
  THEN
   RAISE_APPLICATION_ERROR ( -20001,
   		'Data invalida: ' || TO_CHAR ( :new.data_incepere_reparatii, 'DD.MM.YYYY' ) || ' Data inceperii reparatiilor trebuie sa fie mai mica decat data curenta' );
   END IF;
END; 
/

CREATE SEQUENCE angajati_id_angajati_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER angajati_id_angajati_trg BEFORE
    INSERT ON angajati
    FOR EACH ROW
    WHEN ( new.id_angajat IS NULL )
BEGIN
    :new.id_angajat := angajati_id_angajati_seq.nextval;
END;
/

CREATE SEQUENCE echipe_id_echipa_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER echipe_id_echipa_seq BEFORE
    INSERT ON echipe
    FOR EACH ROW
    WHEN ( new.id_echipa IS NULL )
BEGIN
    :new.id_echipa := echipe_id_echipa_seq.nextval;
END;
/

CREATE SEQUENCE joburi_id_job_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER joburi_id_job_trg BEFORE
    INSERT ON joburi
    FOR EACH ROW
    WHEN ( new.id_job IS NULL )
BEGIN
    :new.id_job := joburi_id_job_seq.nextval;
END;
/

CREATE SEQUENCE magazine_id_magazin_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER magazine_id_magazin_trg BEFORE
    INSERT ON magazine
    FOR EACH ROW
    WHEN ( new.id_magazin IS NULL )
BEGIN
    :new.id_magazin := magazine_id_magazin_seq.nextval;
END;
/

CREATE SEQUENCE orase_id_oras_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER orase_id_oras_trg BEFORE
    INSERT ON orase
    FOR EACH ROW
    WHEN ( new.id_oras IS NULL )
BEGIN
    :new.id_oras := orase_id_oras_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             9
-- CREATE INDEX                             2
-- ALTER TABLE                             31
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           9
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          5
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- TSDP POLICY                              0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
